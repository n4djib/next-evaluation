

npx shadcn-ui@latest init
npx shadcn-ui@latest add

# npm i @material-tailwind/react




== Cerbos Docker Container
docker run --rm --name cerbos -p 3592:3592 ghcr.io/cerbos/cerbos:0.35.1



==== some tests on docker compose
docker compose up -d
docker-compose down --volumes
    this deletes all the volumes creted by compose




== Postgres Docker Container
docker run --name next-eval-pg -e POSTGRES_PASSWORD=123456 -p 5432:5432 -d postgres
    
    = tuto: https://www.youtube.com/watch?v=RdPYA-wDhTA


docker volume create postgres_volume

docker  volume ls

docker run  --name next-eval-pg  -e POSTGRES_PASSWORD=123456  -p 5432:5432  -v postgres_volume:/var/lib/postgresql/data  -d postgres

    next-eval-pg
    5432
    next-eval-app_eval-pg-vol
    /var/lib/postgresql/data
    POSTGRES_PASSWORD
    123456



docker exec -it next-eval-pg psql -U postgres

postgres=# create database demo_db; 

docker compose up


== Drizzle and postgres

npm i drizzle-orm
npm i -D drizzle-kit
npm i postgres


= generate then run migration
npx drizzle-kit generate:pg
npx tsx migrate.ts

if npx tsx migrate.ts has error and you want to drop the generated migration file, use:
    npx drizzle-kit drop


npm i -D pg
npx drizzle-kit studio


== Next-auth
npm i next-auth

npm i bcrypt
npm i -D @types/bcrypt



npm i  @nextui-org/react  framer-motion


npm i react-hook-form
npm i zod
npm i @hookform/resolvers

npm i validator
npm i -D @types/validator

npm i check-password-strength

npm i react-toastify    // didn't work
npm i react-hot-toast

npm i nodemailer
npm i -D @types/nodemailer



npm i jsonwebtoken
npm i -D @types/jsonwebtoken


npm i handlebars





=================
===== TO-DO =====
=================
- input field mask (phone, currency)
- upload images
- you should use uuid+db rather jwt
    because the jwt is not expired after use
- 
- 
- 
================
===== BUGS =====
================
- in signUp if we change the schema.drizzle (change field name)
    the optional fields are not caught when trying to create a new user
    registerNewUser() server action
    const newUser = { nn: "test", ...user };

      const res = await registerNewUser({ nn: "test", ...user });
      const res = await registerNewUser(newUser);
      
- Import trace for requested module:
    ./node_modules/handlebars/lib/index.js
    require.extensions is not supported by webpack. Use a loader instead
    FIX:
    "browser": "dist/handlebars.js",
    to handlebars' package.json solved this for me.
    RESULT: didn't work
- can't a hacker see the token in the url and use it to reset the password?
    i better store the tokens in the database and remove them after use
- 
- 
- 

===========================
===========================

// todo-tree.general.tags settings
// TODO
// FIXME
// BUG
// HACK
// XXX
// [x]

== minio
docker run -d -p 9000:9000 -p 9001:9001 --name minio1 -v c:\minio\data:/data -e "MINIO_ROOT_USER=ROOTUSER" -e "MINIO_ROOT_PASSWORD=CHANGEME123" quay.io/minio/minio server /data --console-address ":9001"


